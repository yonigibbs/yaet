{"version":3,"sources":["index.js"],"names":["settings","localStorage","getItem","highScores","app","Elm","Main","init","node","document","querySelector","flags","JSON","parse","ports","persistSettings","subscribe","setItem","stringify"],"mappings":";;;AAkBA,aAlBA,IAAA,EAAA,QAAA,cAIMA,EAAWC,aAAaC,QAAQ,YAChCC,EAAaF,aAAaC,QAAQ,cAElCE,EAAMC,EAAIC,IAAAA,KAAKC,KAAK,CACtBC,KAAMC,SAASC,cAAc,QAC7BC,MAAO,CACHX,SAAUA,EAAWY,KAAKC,MAAMb,GAAY,KAC5CG,WAAYA,EAAaS,KAAKC,MAAMV,GAAc,QAO1DC,EAAIU,MAAMC,gBAAgBC,UAAU,SAAAhB,GAAYC,OAAAA,aAAagB,QAAQ,WAAYL,KAAKM,UAAUlB","file":"src.58b75da3.js","sourceRoot":"../src","sourcesContent":["import {Elm} from \"./Main.elm\"\n\n// Read the settings and high scores from local storage. This is sent into the Elm app as JSON which is decoded using\n// Elm. Any errors in decoding (or null values) result in the default settings and high scores being used instead.\nconst settings = localStorage.getItem(\"settings\")\nconst highScores = localStorage.getItem(\"highScores\")\n\nconst app = Elm.Main.init({\n    node: document.querySelector(\"main\"),\n    flags: {\n        settings: settings ? JSON.parse(settings) : null,\n        highScores: highScores ? JSON.parse(highScores) : null\n    }\n})\n\n/**\n * Persists the settings in local storage.\n */\napp.ports.persistSettings.subscribe(settings => localStorage.setItem(\"settings\", JSON.stringify(settings)))\n"]}